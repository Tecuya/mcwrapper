#! /bin/bash

MCWRAPPER="$0"
MCWRAPPER_DIR=`dirname "$MCWRAPPER"`
MCWRAPPER_CONFIG_NAME="mcwrapper.conf"

# filename of the minecraft server
MINECRAFT_SERVER_NAME="minecraft_server.jar"

# filename of the minecraft server.properties file
MINECRAFT_SERVER_PROPERTIES_NAME="server.properties"

# figure out where the config file lives
function get_config_path {
	
	# if it's defined in an ENV var, then let's use that	
	if [[ ! -z "$MCWRAPPER_CONFIG_PATH" ]]; then
		echo $MCWRAPPER_CONFIG_PATH
		return
	fi
	
	# check ./mcwrapper.conf
	CURRENT_PATH="${MCWRAPPER_DIR}/${MCWRAPPER_CONFIG_NAME}"
	if [[ -e "$CURRENT_PATH" ]]; then
		echo $CURRENT_PATH
		return
	fi
	
	# check ~/.mcwrapper.conf
	CURRENT_PATH=~/".${MCWRAPPER_CONFIG_NAME}"
	if [[ -e "$CURRENT_PATH" ]]; then
		echo $CURRENT_PATH
		return
	fi
		
	# check /etc/mcwrapper.conf
	CURRENT_PATH="/etc/${MCWRAPPER_CONFIG_NAME}"
	if [[ -e "$CURRENT_PATH" ]]; then
		echo $CURRENT_PATH
		return
	fi
}

# configure self from config file
function read_config {
	CONFIG_PATH=`get_config_path`
	
	# if it's not found, don't do shit. stick with default values.
	if [[ -z "$CONFIG_PATH" || ! -e "$CONFIG_PATH" ]]; then
		return
	fi
	
	# it was found, so we read it by sourcing it.
	. "$CONFIG_PATH"	
}

function default_config {
	# path to the minecraft_server.jar
	# if this is not defined in the existing environment, define here.
	if [[ -z "$MINECRAFT_SERVER_PATH" ]]; then

		# check in the current directory first, then check one level up for minecraft.
		# if it's not actually where it thinks it is, it'll break when it tries to do something.
		# the resulting value of MINECRAFT_SERVER_PATH will be the last place that it looked.

		MINECRAFT_SERVER_PATH="${MCWRAPPER_DIR}/${MINECRAFT_SERVER_NAME}"
		
		if [[ ! -e "$MINECRAFT_SERVER_NAME" ]]; then
			MINECRAFT_SERVER_PATH="${MCWRAPPER_DIR}/../${MINECRAFT_SERVER_NAME}"
		fi

	fi
	
	# Java VM settings (increasing these never hurts)
	MX_SIZE="1024M"
	MS_SIZE="1024M"

	# these can be relative or absolute paths
	# if relative, they're relative to the mcwrapper executable
	PID_FILE="mcwrapper.pid"
	COMMAND_PIPE="command_input"

	# the directory of the minecraft_server.jar based off $MINECRAFT_SERVER_PATH
	MINECRAFT_SERVER_DIR_PATH=`dirname $MINECRAFT_SERVER_PATH`
}

# run this to process a loaded config
# some variables require some modification before they can be used
# for example $PID_FILE which can be relative or absolute.
# if relative, we want to prepend the MCWRAPPER_DIR to it.
function process_config {
	
	# MINECRAFT_SERVER_PATH can be relative or absolute
	if [[ ! "$MINECRAFT_SERVER_PATH" =~ ^/ && ! "$MINECRAFT_SERVER_PATH" =~ "$MCWRAPPER_DIR" ]]; then
		MINECRAFT_SERVER_PATH="${MCWRAPPER_DIR}/$MINECRAFT_SERVER_PATH"
	fi
	
	# PID_FILE can be relative or absolute
	if [[ ! "$PID_FILE" =~ ^/ ]]; then
		PID_FILE="${MCWRAPPER_DIR}/$PID_FILE"
	fi
	
	# COMMAND_PIPE can be relative or absolute
	if [[ ! "$COMMAND_PIPE" =~ ^/ ]]; then
		COMMAND_PIPE="${MCWRAPPER_DIR}/$COMMAND_PIPE"
	fi
	
	# set MINECRAFT_SERVER_CMD
	# this may be overridden in the config, so if it's set already, don't set it.
	if [[ -z "$MINECRAFT_SERVER_CMD" ]]; then
		# command for starting minecraft_server.jar
		MINECRAFT_SERVER_CMD="java -Xmx${MX_SIZE} -Xms${MS_SIZE} -jar "$MINECRAFT_SERVER_PATH" nogui"
	fi
	
	# the path to the server.properties file
	if [[ -z "$SERVER_PROPERTIES_PATH" ]]; then
		SERVER_PROPERTIES_PATH=`dirname "$MINECRAFT_SERVER_PATH"`"/${MINECRAFT_SERVER_PROPERTIES_NAME}"
	fi
}

function read_server_property {
	# takes 1 arg... the property name
	PROP_NAME=$1;shift
		
	cat $SERVER_PROPERTIES_PATH | grep $PROP_NAME | awk -F '=' '{ print $2 }'
}

function read_command {
	# read from the command pipe
	exec < "$COMMAND_PIPE"
	
	read INPUT
	echo $INPUT
	
	# if the user said "stop" then exit after the command completes.
	if [[ "$INPUT" = "stop" ]]; then
		exit 0
	fi
	
	# recurse
	read_command
}

function send_command {
	check_is_running
	
	COMMAND=$1
	echo "$COMMAND" > "$COMMAND_PIPE"
}

function check_is_running {
	if [[ ! -e "$PID_FILE" ]]; then
		#echo "Server not running!" >&2
		return 1 # TODO: set up some real exit codes that are unique
	fi
	
	PID=`cat "$PID_FILE"`
	
	# check to see if we have a wrapper currently running
	kill -0 $PID 2>&- 1>&-
	if [[ $? != 0 ]]; then
		#echo "Server not running!" >&2
		return 1 # TODO: set up some real exit codes that are unique
	fi
	
	return 0
}

function set_up_pipe {
	if [[ ! -p "$COMMAND_PIPE" ]]; then
		echo "Pipe doesn't exist, creating it..." >&2
		mkfifo "$COMMAND_PIPE"
		
		if [[ $? != 0 ]]; then
			# if mkfifo failed, print error message, exit non-zero.
			echo "Error creating the pipe: $COMMAND_PIPE ($?)." >&2
			exit 1
		fi
	fi
}

function sanity_check {
	# TODO: add checks to make sure that PID_FILE and COMMAND_PIPE are writable
	
	# check to make sure that things that need to exist exist.
	if [[ ! -e "$MINECRAFT_SERVER_PATH" ]]; then
		# the minecraft server path does not exist.
		echo "Minecraft server not found! ($MINECRAFT_SERVER_PATH)"
		exit 1
	fi
}

function print_usage {
	echo "USAGE:"
	echo "    $0 <action>"
	echo ""
	echo "Action can be one of:"
	echo "    start  -- start the server if it's not already running"
	echo "    status -- whether the server is running or not"
	echo "    config -- used to read configuration information about mcwrapper"
	echo "              example: ./mcwrapper config serverpath"
	echo "              valid configuration parameters are:"
	echo "               *  serverpath -- absolute path to minecraft_server.jar"
	echo "               *  serverdir  -- absolute path to server directory (containing minecraft_server.jar)"
	echo "               *  pidfile    -- absolute path to mcwrapper pidfile"
	echo "               *  pipe       -- absolute path to the mcwrapper command pipe"
	echo "               *  command    -- the command that will be used to launch the minecraft server"
	echo "Any other action is interpretted as a server command and is directed to the minecraft server"
	echo ""
}

## begin meat of program:

if [[ $# -eq 0 ]]; then
	print_usage
	exit 0
fi

ACTION=$1;shift

# selfconfigure
default_config
read_config
process_config

# check to make sure that we're in a sane configuration
# function exits on error.
sanity_check

# must cd to minecraft server directory to make sure support files are created in the correct place.

case $ACTION in
	start )
		# write the PID file and start'er up!
		# don't start if we're already running.
		
		check_is_running
		
		if [[ $? = 0 ]]; then
			echo "Server is already running. Exiting..." >&2
			exit 1
		fi
		
		echo $$ > $PID_FILE
		set_up_pipe
		( cd $MINECRAFT_SERVER_DIR_PATH ; read_command | $MINECRAFT_SERVER_CMD )
		
		# clean up PID file when done.
		rm $PID_FILE
		;;
	status )
		check_is_running
		if [[ $? = 0 ]]; then
			echo "Server is running." >&2
			exit 0
		fi
		
		echo "Server is NOT running." >&2
		exit 1
		
		;;
	config )
		# dump info about the config
		CONFIG_SETTING=$1
		case $CONFIG_SETTING in
			serverpath )
				echo $MINECRAFT_SERVER_PATH
				exit 0
				;;
			serverdir )
				echo $MINECRAFT_SERVER_DIR_PATH
				exit 0
				;;
			pidfile )
				echo $PID_FILE
				exit 0
				;;
			pipe )
				echo $COMMAND_PIPE
				exit 0
				;;
			configfile )
				echo $CONFIG_PATH
				exit 0
				;;
			command )
				echo $MINECRAFT_SERVER_CMD
				exit 0
				;;
			*)
				echo "Unknown config setting: $CONFIG_SETTING"
				exit 1
				;;
		esac
		;;
	prop )
		PROP=$1
		read_server_property $PROP
		exit 0
		;;
	help )
		print_usage
		exit 0
		;;
	* )
		COMMAND="$ACTION $@"
		echo "sending: $COMMAND"
		check_is_running
		if [[ $? != 0 ]]; then
			echo "Server is NOT running. Not sending command"
			exit 1
		fi
		
		send_command "$COMMAND"
		exit 0
		;;
esac

exit 0


