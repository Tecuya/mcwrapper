#! /bin/bash

MINECRAFT_SERVER_PATH="/Users/spike/minecraft/minecraft_server.jar"
MX_SIZE="1024M"
MS_SIZE="1024M"

MINECRAFT_SERVER_CMD="java -Xmx${MX_SIZE} -Xms${MS_SIZE} -jar $MINECRAFT_SERVER_PATH nogui"

COMMAND_PIPE="command_input"
PID_FILE="mcwrapper.pid"

# END CONFIGURATION SETTINGS ############
#########################################

function read_command {
	# read from the command pipe
	exec < $COMMAND_PIPE
	
	read INPUT
	echo $INPUT
	
	# if the user said "stop" then exit after the command completes.
	if [[ "$INPUT" = "stop" ]]; then
		exit 0
	fi
	
	# recurse
	read_command
}

function send_command {
	check_is_running
	
	COMMAND=$1
	echo $COMMAND > $COMMAND_PIPE
}

function check_is_running {
	if [[ ! -e $PID_FILE ]]; then
		echo "Server not running!" >&2
		exit 1 # TODO: set up some real exit codes that are unique
	fi
	
	PID=`cat $PID_FILE`
	
	# check to see if we have a wrapper currently running
	kill -0 $PID 2>&- 1>&-
	if [[ $? != 0 ]]; then
		echo "Server not running!" >&2
		exit 1 # TODO: set up some real exit codes that are unique
	fi
}

function set_up_pipe {
	# TODO: Error checking for if this action fails.
	if [[ ! -p "$COMMAND_PIPE" ]]; then
		echo "Pipe doesn't exist, creating it..."
		mkfifo $COMMAND_PIPE
	fi
}

function print_usage {
	echo "USAGE:"
	echo "    $0 <action>"
	echo "Action can be one of:"
	echo "    start  -- start the server if it's not already running"
	echo "    status -- whether the server is running or not"
	echo "Any other action is interpretted as a server command and is directed to the minecraft server"
	echo ""
}

if [[ $# -eq 0 ]]; then
	print_usage
	exit 0
fi

ACTION=$@

case $ACTION in
	start )
		# write the PID file and start'er up!
		echo $$ > $PID_FILE
		read_command | $MINECRAFT_SERVER_CMD	
		;;
	status )
		check_is_running
		echo "Server is running." >&2
		;;
	* )
		echo "sending: $ACTION"
		send_command "$ACTION"
		;;
esac

exit 0


